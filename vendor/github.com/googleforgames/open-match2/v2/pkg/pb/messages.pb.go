// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// If you're modifying this file, please follow the protobuf style guide:
//   https://protobuf.dev/programming-guides/style/
// and also the Google API design guide
//   https://cloud.google.com/apis/design/
// also see the comments in the http grpc source file:
//   https://github.com/googleapis/googleapis/blob/master/google/api/http.proto
// -----------------------------------------------------
//
// Every message type used by Open Match has an extensions field that can carry
// any kind of data. This field is ignored by Open Match core and simply passed
// through from your matchmaker to your match function invocations and back
// again.
//
// ALL OTHER FIELDS /ARE/ processed by Open Match core in some way.
//
// If a message is updated, those updates should follow this convention:
// Data that Open Match Core DOES NOT access in the course of providing core
// API functionality MUST NOT be specified as a named field. It MUST instead be
// passed through the extensions field. In cases where either would
// work, preference should be given to passing the data through the extensions
// field and leaving the protos as-is.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.2
// source: messages.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// enum used in filters to determine if they are inclusive or exclusive of min/max values.
type Pool_FilterBounds int32

const (
	Pool_EXCLUDE_NONE     Pool_FilterBounds = 0 // MIN <= x <= MAX, i.e. Both bounds are included in results
	Pool_INCLUDE_BOTH     Pool_FilterBounds = 0
	Pool_EXCLUDE_MIN      Pool_FilterBounds = 1 // MIN <  x <= MAX, i.e. The minimum bound is excluded from results
	Pool_EXCLUDE_START    Pool_FilterBounds = 1
	Pool_INCLUDE_MAX_ONLY Pool_FilterBounds = 1
	Pool_EXCLUDE_MAX      Pool_FilterBounds = 2 // MIN <= x <  MAX, i.e. The maximum bound is excluded from results
	Pool_EXCLUDE_END      Pool_FilterBounds = 2
	Pool_INCLUDE_MIN_ONLY Pool_FilterBounds = 2
	Pool_EXCLUDE_BOTH     Pool_FilterBounds = 3 // MIN <  x <  MAX, i.e. Both bounds are excluded from results
	Pool_INCLUDE_NONE     Pool_FilterBounds = 3
)

// Enum value maps for Pool_FilterBounds.
var (
	Pool_FilterBounds_name = map[int32]string{
		0: "EXCLUDE_NONE",
		// Duplicate value: 0: "INCLUDE_BOTH",
		1: "EXCLUDE_MIN",
		// Duplicate value: 1: "EXCLUDE_START",
		// Duplicate value: 1: "INCLUDE_MAX_ONLY",
		2: "EXCLUDE_MAX",
		// Duplicate value: 2: "EXCLUDE_END",
		// Duplicate value: 2: "INCLUDE_MIN_ONLY",
		3: "EXCLUDE_BOTH",
		// Duplicate value: 3: "INCLUDE_NONE",
	}
	Pool_FilterBounds_value = map[string]int32{
		"EXCLUDE_NONE":     0,
		"INCLUDE_BOTH":     0,
		"EXCLUDE_MIN":      1,
		"EXCLUDE_START":    1,
		"INCLUDE_MAX_ONLY": 1,
		"EXCLUDE_MAX":      2,
		"EXCLUDE_END":      2,
		"INCLUDE_MIN_ONLY": 2,
		"EXCLUDE_BOTH":     3,
		"INCLUDE_NONE":     3,
	}
)

func (x Pool_FilterBounds) Enum() *Pool_FilterBounds {
	p := new(Pool_FilterBounds)
	*p = x
	return p
}

func (x Pool_FilterBounds) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pool_FilterBounds) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[0].Descriptor()
}

func (Pool_FilterBounds) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[0]
}

func (x Pool_FilterBounds) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pool_FilterBounds.Descriptor instead.
func (Pool_FilterBounds) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{2, 0}
}

type MatchmakingFunctionSpec_Type int32

const (
	MatchmakingFunctionSpec_REST MatchmakingFunctionSpec_Type = 0
	MatchmakingFunctionSpec_GRPC MatchmakingFunctionSpec_Type = 1
)

// Enum value maps for MatchmakingFunctionSpec_Type.
var (
	MatchmakingFunctionSpec_Type_name = map[int32]string{
		0: "REST",
		1: "GRPC",
	}
	MatchmakingFunctionSpec_Type_value = map[string]int32{
		"REST": 0,
		"GRPC": 1,
	}
)

func (x MatchmakingFunctionSpec_Type) Enum() *MatchmakingFunctionSpec_Type {
	p := new(MatchmakingFunctionSpec_Type)
	*p = x
	return p
}

func (x MatchmakingFunctionSpec_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchmakingFunctionSpec_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_proto_enumTypes[1].Descriptor()
}

func (MatchmakingFunctionSpec_Type) Type() protoreflect.EnumType {
	return &file_messages_proto_enumTypes[1]
}

func (x MatchmakingFunctionSpec_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchmakingFunctionSpec_Type.Descriptor instead.
func (MatchmakingFunctionSpec_Type) EnumDescriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{6, 0}
}

// A Ticket is a basic matchmaking entity in Open Match. A Ticket may represent
// an individual 'Player', a 'Group' of players, or any other concepts unique to
// your use case. Open Match will not interpret what the Ticket represents but
// just treat it as a matchmaking unit with a set of SearchFields.
type Ticket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// auto-generated Id populated by Open Match.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Open Match populates to (the current time + OM_TICKET_TTL_SECS)
	ExpirationTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
	Attributes     *Ticket_FilterableData `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"` // fields which Open Match filters can access
	// Optional, user-customized information (ignored by Open Match)
	Extensions map[string]*anypb.Any `protobuf:"bytes,4,rep,name=extensions,proto3" json:"extensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Ticket) Reset() {
	*x = Ticket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket) ProtoMessage() {}

func (x *Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket.ProtoReflect.Descriptor instead.
func (*Ticket) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0}
}

func (x *Ticket) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Ticket) GetExpirationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationTime
	}
	return nil
}

func (x *Ticket) GetAttributes() *Ticket_FilterableData {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Ticket) GetExtensions() map[string]*anypb.Any {
	if x != nil {
		return x.Extensions
	}
	return nil
}

// An Assignment represents a game server assignment associated with a Ticket.
type Assignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection string `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"` // Connection information for this Assignment.
	// Optional, user-customized information (ignored by Open Match)
	Extensions map[string]*anypb.Any `protobuf:"bytes,2,rep,name=extensions,proto3" json:"extensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Assignment) Reset() {
	*x = Assignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assignment) ProtoMessage() {}

func (x *Assignment) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assignment.ProtoReflect.Descriptor instead.
func (*Assignment) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{1}
}

func (x *Assignment) GetConnection() string {
	if x != nil {
		return x.Connection
	}
	return ""
}

func (x *Assignment) GetExtensions() map[string]*anypb.Any {
	if x != nil {
		return x.Extensions
	}
	return nil
}

// Pool specfies a set of criteria that are used to select a subset of Tickets
// that meet all the criteria.
type Pool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                    string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // User-defined name. Used to correlate logs, traces, and telemetry.
	TagPresentFilters       []*Pool_TagPresentFilter      `protobuf:"bytes,2,rep,name=tag_present_filters,json=tagPresentFilters,proto3" json:"tag_present_filters,omitempty"`
	StringEqualsFilters     []*Pool_StringEqualsFilter    `protobuf:"bytes,3,rep,name=string_equals_filters,json=stringEqualsFilters,proto3" json:"string_equals_filters,omitempty"`
	DoubleRangeFilters      []*Pool_DoubleRangeFilter     `protobuf:"bytes,4,rep,name=double_range_filters,json=doubleRangeFilters,proto3" json:"double_range_filters,omitempty"`
	CreationTimeRangeFilter *Pool_CreationTimeRangeFilter `protobuf:"bytes,5,opt,name=creation_time_range_filter,json=creationTimeRangeFilter,proto3" json:"creation_time_range_filter,omitempty"`
	// Output_only Participants are populated by the open match InvokeMatchMakingFunction RPC.
	Participants *Roster `protobuf:"bytes,6,opt,name=participants,proto3" json:"participants,omitempty"` // The tickets in open match that match all the filters of this Pool.
	// Optional, user-customized information (ignored by Open Match)
	Extensions map[string]*anypb.Any `protobuf:"bytes,7,rep,name=extensions,proto3" json:"extensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Pool) Reset() {
	*x = Pool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool) ProtoMessage() {}

func (x *Pool) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pool.ProtoReflect.Descriptor instead.
func (*Pool) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{2}
}

func (x *Pool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Pool) GetTagPresentFilters() []*Pool_TagPresentFilter {
	if x != nil {
		return x.TagPresentFilters
	}
	return nil
}

func (x *Pool) GetStringEqualsFilters() []*Pool_StringEqualsFilter {
	if x != nil {
		return x.StringEqualsFilters
	}
	return nil
}

func (x *Pool) GetDoubleRangeFilters() []*Pool_DoubleRangeFilter {
	if x != nil {
		return x.DoubleRangeFilters
	}
	return nil
}

func (x *Pool) GetCreationTimeRangeFilter() *Pool_CreationTimeRangeFilter {
	if x != nil {
		return x.CreationTimeRangeFilter
	}
	return nil
}

func (x *Pool) GetParticipants() *Roster {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *Pool) GetExtensions() map[string]*anypb.Any {
	if x != nil {
		return x.Extensions
	}
	return nil
}

type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User-defined name.
	// By convention, name your profiles using reverse-dns notation, since the
	// profile name is populated in log and telemetry attributes.  Telemetry can
	// be overwhelmed by too many unique profile names (google 'cardinality
	// explosion' for more details), so Open Match strips out everything after
	// the last '.' in a profile name. As a general guidance, try to keep the
	// total number of resulting profile names that will be passed on to the
	// telemetry in the low dozens at most.  For example:
	// name = 'teamshooter.asia.2024-03-01-00:00:00'
	// and
	// name = 'teamshooter.asia.rev113148-8'
	// would both truncated when included in logs and telemetry as 'teamshooter.asia'
	Name  string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pools map[string]*Pool `protobuf:"bytes,2,rep,name=pools,proto3" json:"pools,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Set of pools to be queried and sent to the matchfunction
	// Optional, user-customized information (ignored by Open Match)
	Extensions map[string]*anypb.Any `protobuf:"bytes,3,rep,name=extensions,proto3" json:"extensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{3}
}

func (x *Profile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Profile) GetPools() map[string]*Pool {
	if x != nil {
		return x.Pools
	}
	return nil
}

func (x *Profile) GetExtensions() map[string]*anypb.Any {
	if x != nil {
		return x.Extensions
	}
	return nil
}

type Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                   // User-defined Match ID added to telemetry. Used to correlate matches to logs and traces.
	Rosters map[string]*Roster `protobuf:"bytes,2,rep,name=rosters,proto3" json:"rosters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Tickets belonging to this match.
	// Optional, user-customized information (ignored by Open Match)
	Extensions map[string]*anypb.Any `protobuf:"bytes,3,rep,name=extensions,proto3" json:"extensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Match) Reset() {
	*x = Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{4}
}

func (x *Match) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Match) GetRosters() map[string]*Roster {
	if x != nil {
		return x.Rosters
	}
	return nil
}

func (x *Match) GetExtensions() map[string]*anypb.Any {
	if x != nil {
		return x.Extensions
	}
	return nil
}

// A Roster is a group of Tickets that share an assignment.
type Roster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Assignment *Assignment `protobuf:"bytes,2,opt,name=assignment,proto3" json:"assignment,omitempty"`
	Tickets    []*Ticket   `protobuf:"bytes,3,rep,name=tickets,proto3" json:"tickets,omitempty"`
	// Optional, user-customized information (ignored by Open Match)
	Extensions map[string]*anypb.Any `protobuf:"bytes,4,rep,name=extensions,proto3" json:"extensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Roster) Reset() {
	*x = Roster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Roster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Roster) ProtoMessage() {}

func (x *Roster) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Roster.ProtoReflect.Descriptor instead.
func (*Roster) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{5}
}

func (x *Roster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Roster) GetAssignment() *Assignment {
	if x != nil {
		return x.Assignment
	}
	return nil
}

func (x *Roster) GetTickets() []*Ticket {
	if x != nil {
		return x.Tickets
	}
	return nil
}

func (x *Roster) GetExtensions() map[string]*anypb.Any {
	if x != nil {
		return x.Extensions
	}
	return nil
}

// specify MMF address and client type
type MatchmakingFunctionSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User-defined name.
	//
	// Note: The MatchmakingFunctionSpec name is populated in log and telemetry
	// attributes.  Telemetry can be overwhelmed by too many unique mmf names
	// (google 'cardinality explosion' for more details), so as a general
	// guidance, try to keep the total number of mmf names you use to a few dozen
	// at most
	Name string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Host string                       `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port int32                        `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Type MatchmakingFunctionSpec_Type `protobuf:"varint,4,opt,name=type,proto3,enum=open_match2.MatchmakingFunctionSpec_Type" json:"type,omitempty"`
}

func (x *MatchmakingFunctionSpec) Reset() {
	*x = MatchmakingFunctionSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchmakingFunctionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakingFunctionSpec) ProtoMessage() {}

func (x *MatchmakingFunctionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakingFunctionSpec.ProtoReflect.Descriptor instead.
func (*MatchmakingFunctionSpec) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{6}
}

func (x *MatchmakingFunctionSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MatchmakingFunctionSpec) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MatchmakingFunctionSpec) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MatchmakingFunctionSpec) GetType() MatchmakingFunctionSpec_Type {
	if x != nil {
		return x.Type
	}
	return MatchmakingFunctionSpec_REST
}

// API reponse/request messages, used by api.proto and mmf.proto
// --------------------------------------------------------------
// Arguments sent to your MMF can be more than the maximum gRPC message size of
// 4mb if you are sending a lot of tickets to your MMF. Your MMF should read
// the stream of PagedMmfRunRequests until it is complete, and concatinate pool
// participants based on pool name in order to reconstruct the full,
// unpaginated ticket pools.
type ChunkedMmfRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Part of a profile chunked to fit in max gRPC message size
	Profile *Profile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	// How many chunks this profile is broken into
	NumChunks int32 `protobuf:"varint,2,opt,name=num_chunks,json=numChunks,proto3" json:"num_chunks,omitempty"`
}

func (x *ChunkedMmfRunRequest) Reset() {
	*x = ChunkedMmfRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkedMmfRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkedMmfRunRequest) ProtoMessage() {}

func (x *ChunkedMmfRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkedMmfRunRequest.ProtoReflect.Descriptor instead.
func (*ChunkedMmfRunRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{7}
}

func (x *ChunkedMmfRunRequest) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *ChunkedMmfRunRequest) GetNumChunks() int32 {
	if x != nil {
		return x.NumChunks
	}
	return 0
}

// CreateTicket forcably assigns an unique TicketId and puts the ticket into state storage.
type CreateTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket *Ticket `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
}

func (x *CreateTicketRequest) Reset() {
	*x = CreateTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTicketRequest) ProtoMessage() {}

func (x *CreateTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTicketRequest.ProtoReflect.Descriptor instead.
func (*CreateTicketRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{8}
}

func (x *CreateTicketRequest) GetTicket() *Ticket {
	if x != nil {
		return x.Ticket
	}
	return nil
}

type CreateTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketId string `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
}

func (x *CreateTicketResponse) Reset() {
	*x = CreateTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTicketResponse) ProtoMessage() {}

func (x *CreateTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTicketResponse.ProtoReflect.Descriptor instead.
func (*CreateTicketResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{9}
}

func (x *CreateTicketResponse) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

// DeactivateTicket removes the Ticket from state storage asynchronously.
type DeactivateTicketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketIds []string `protobuf:"bytes,1,rep,name=ticket_ids,json=ticketIds,proto3" json:"ticket_ids,omitempty"`
}

func (x *DeactivateTicketsRequest) Reset() {
	*x = DeactivateTicketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateTicketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateTicketsRequest) ProtoMessage() {}

func (x *DeactivateTicketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateTicketsRequest.ProtoReflect.Descriptor instead.
func (*DeactivateTicketsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{10}
}

func (x *DeactivateTicketsRequest) GetTicketIds() []string {
	if x != nil {
		return x.TicketIds
	}
	return nil
}

type DeactivateTicketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeactivateTicketsResponse) Reset() {
	*x = DeactivateTicketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateTicketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateTicketsResponse) ProtoMessage() {}

func (x *DeactivateTicketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateTicketsResponse.ProtoReflect.Descriptor instead.
func (*DeactivateTicketsResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{11}
}

// ActivateTickets moves tickets from the inactive state back to the active state (will show up in pools).
type ActivateTicketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketIds []string `protobuf:"bytes,1,rep,name=ticket_ids,json=ticketIds,proto3" json:"ticket_ids,omitempty"`
}

func (x *ActivateTicketsRequest) Reset() {
	*x = ActivateTicketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateTicketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateTicketsRequest) ProtoMessage() {}

func (x *ActivateTicketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateTicketsRequest.ProtoReflect.Descriptor instead.
func (*ActivateTicketsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{12}
}

func (x *ActivateTicketsRequest) GetTicketIds() []string {
	if x != nil {
		return x.TicketIds
	}
	return nil
}

type ActivateTicketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActivateTicketsResponse) Reset() {
	*x = ActivateTicketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateTicketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateTicketsResponse) ProtoMessage() {}

func (x *ActivateTicketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateTicketsResponse.ProtoReflect.Descriptor instead.
func (*ActivateTicketsResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{13}
}

// MmfRequest is sent to the InvokeMatchmakingFunction() rpc call to define how
// to call your mmf, and what arguments to send it.
type MmfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A Profile to send to the MatchMakingFunction(s)
	Profile *Profile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	// List of MatchMakingfunctions to invoke.
	Mmfs []*MatchmakingFunctionSpec `protobuf:"bytes,2,rep,name=mmfs,proto3" json:"mmfs,omitempty"`
}

func (x *MmfRequest) Reset() {
	*x = MmfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmfRequest) ProtoMessage() {}

func (x *MmfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmfRequest.ProtoReflect.Descriptor instead.
func (*MmfRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{14}
}

func (x *MmfRequest) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *MmfRequest) GetMmfs() []*MatchmakingFunctionSpec {
	if x != nil {
		return x.Mmfs
	}
	return nil
}

// A stream of matches. This is sent from your MMF to om-core, and om-core in
// turn sends this back to your matchmaker. Max message size is default 4MB,
// and om-core does not try to increase it; as a result you should return
// matches that are less than 4mb each or you'll get RPC errors.
// Although typical best pratice recommends defining separate reponse types
// for the mmf.Run() and om-core.InvokeMmfs() RPCs, here we've intentionally
// made them share a response message so it's completely clear that your
// mmf response to om-core will be exactly what om-core returns to your
// matchmaker.
type StreamedMmfResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match *Match `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
}

func (x *StreamedMmfResponse) Reset() {
	*x = StreamedMmfResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamedMmfResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamedMmfResponse) ProtoMessage() {}

func (x *StreamedMmfResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamedMmfResponse.ProtoReflect.Descriptor instead.
func (*StreamedMmfResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{15}
}

func (x *StreamedMmfResponse) GetMatch() *Match {
	if x != nil {
		return x.Match
	}
	return nil
}

// DEV/TEST ONLY - DO NOT USE IN PRODUCTION
// CreateAssignments creates an assignment for all Tickets in this Roster. These assignments can be retrieved
// with the Ticket ID using the WatchAssignments rpc.
type CreateAssignmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssignmentRoster *Roster `protobuf:"bytes,1,opt,name=assignment_roster,json=assignmentRoster,proto3" json:"assignment_roster,omitempty"`
}

func (x *CreateAssignmentsRequest) Reset() {
	*x = CreateAssignmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAssignmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAssignmentsRequest) ProtoMessage() {}

func (x *CreateAssignmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAssignmentsRequest.ProtoReflect.Descriptor instead.
func (*CreateAssignmentsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{16}
}

func (x *CreateAssignmentsRequest) GetAssignmentRoster() *Roster {
	if x != nil {
		return x.AssignmentRoster
	}
	return nil
}

type CreateAssignmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateAssignmentsResponse) Reset() {
	*x = CreateAssignmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAssignmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAssignmentsResponse) ProtoMessage() {}

func (x *CreateAssignmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAssignmentsResponse.ProtoReflect.Descriptor instead.
func (*CreateAssignmentsResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{17}
}

// DEV/TEST ONLY - DO NOT USE IN PRODUCTION
// WatchAssignments streams back results of the AssignTickets RPC that affected these TicketIds.
type WatchAssignmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketIds []string `protobuf:"bytes,1,rep,name=ticket_ids,json=ticketIds,proto3" json:"ticket_ids,omitempty"`
}

func (x *WatchAssignmentsRequest) Reset() {
	*x = WatchAssignmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchAssignmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchAssignmentsRequest) ProtoMessage() {}

func (x *WatchAssignmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchAssignmentsRequest.ProtoReflect.Descriptor instead.
func (*WatchAssignmentsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{18}
}

func (x *WatchAssignmentsRequest) GetTicketIds() []string {
	if x != nil {
		return x.TicketIds
	}
	return nil
}

type StreamedWatchAssignmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assignment *Assignment `protobuf:"bytes,1,opt,name=assignment,proto3" json:"assignment,omitempty"`
	Id         string      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StreamedWatchAssignmentsResponse) Reset() {
	*x = StreamedWatchAssignmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamedWatchAssignmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamedWatchAssignmentsResponse) ProtoMessage() {}

func (x *StreamedWatchAssignmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamedWatchAssignmentsResponse.ProtoReflect.Descriptor instead.
func (*StreamedWatchAssignmentsResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{19}
}

func (x *StreamedWatchAssignmentsResponse) GetAssignment() *Assignment {
	if x != nil {
		return x.Assignment
	}
	return nil
}

func (x *StreamedWatchAssignmentsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Fields indexed by Open Match which can be used when specifying filters.
// NOTE:
// Every field that you populate in this data structure consumes significant Open Match core CPU & memory!
// Be frugal and only use this data structure for fields you will use to construct Ticket Pools;
// if you just want to access some ticket-specific data in your matchmaker or MMF,
// put it in the Ticket's more efficient 'extensions' field instead, which Open Match
// just stores and forwards to your code without additional parsing, indexing, or processing.
type Ticket_FilterableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags       []string           `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`                                                                                                                         // Strings, filterable on presence of tag.
	StringArgs map[string]string  `protobuf:"bytes,2,rep,name=string_args,json=stringArgs,proto3" json:"string_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`   // key+value pairs, string values filterable on equality.
	DoubleArgs map[string]float64 `protobuf:"bytes,3,rep,name=double_args,json=doubleArgs,proto3" json:"double_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"` // key+value pairs, float values filterable on ranges.
	// Override-able timestamp.
	// Open Match will populate this with the current time
	// if you don't specify a value at ticket creation.
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
}

func (x *Ticket_FilterableData) Reset() {
	*x = Ticket_FilterableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ticket_FilterableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket_FilterableData) ProtoMessage() {}

func (x *Ticket_FilterableData) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket_FilterableData.ProtoReflect.Descriptor instead.
func (*Ticket_FilterableData) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Ticket_FilterableData) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Ticket_FilterableData) GetStringArgs() map[string]string {
	if x != nil {
		return x.StringArgs
	}
	return nil
}

func (x *Ticket_FilterableData) GetDoubleArgs() map[string]float64 {
	if x != nil {
		return x.DoubleArgs
	}
	return nil
}

func (x *Ticket_FilterableData) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

// Set of Filters. Tickets in this pool match all filters below.
// Filters only access data in the Ticket's "attributes" field.
//
//	(A Pool is an 'intersection', in mathematical set terms)
type Pool_TagPresentFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *Pool_TagPresentFilter) Reset() {
	*x = Pool_TagPresentFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pool_TagPresentFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool_TagPresentFilter) ProtoMessage() {}

func (x *Pool_TagPresentFilter) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pool_TagPresentFilter.ProtoReflect.Descriptor instead.
func (*Pool_TagPresentFilter) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Pool_TagPresentFilter) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type Pool_StringEqualsFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringArg string `protobuf:"bytes,1,opt,name=string_arg,json=stringArg,proto3" json:"string_arg,omitempty"` // Which map key of the ticket's search_fields.string_args to filter
	Value     string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Pool_StringEqualsFilter) Reset() {
	*x = Pool_StringEqualsFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pool_StringEqualsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool_StringEqualsFilter) ProtoMessage() {}

func (x *Pool_StringEqualsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pool_StringEqualsFilter.ProtoReflect.Descriptor instead.
func (*Pool_StringEqualsFilter) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Pool_StringEqualsFilter) GetStringArg() string {
	if x != nil {
		return x.StringArg
	}
	return ""
}

func (x *Pool_StringEqualsFilter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Pool_DoubleRangeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoubleArg string            `protobuf:"bytes,1,opt,name=double_arg,json=doubleArg,proto3" json:"double_arg,omitempty"` // Which map key of the ticket's search_fields.double_args to filter
	Minimum   float64           `protobuf:"fixed64,2,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum   float64           `protobuf:"fixed64,3,opt,name=maximum,proto3" json:"maximum,omitempty"`
	Bounds    Pool_FilterBounds `protobuf:"varint,4,opt,name=bounds,proto3,enum=open_match2.Pool_FilterBounds" json:"bounds,omitempty"` // Defines the bounds to apply when filtering tickets
}

func (x *Pool_DoubleRangeFilter) Reset() {
	*x = Pool_DoubleRangeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pool_DoubleRangeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool_DoubleRangeFilter) ProtoMessage() {}

func (x *Pool_DoubleRangeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pool_DoubleRangeFilter.ProtoReflect.Descriptor instead.
func (*Pool_DoubleRangeFilter) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{2, 2}
}

func (x *Pool_DoubleRangeFilter) GetDoubleArg() string {
	if x != nil {
		return x.DoubleArg
	}
	return ""
}

func (x *Pool_DoubleRangeFilter) GetMinimum() float64 {
	if x != nil {
		return x.Minimum
	}
	return 0
}

func (x *Pool_DoubleRangeFilter) GetMaximum() float64 {
	if x != nil {
		return x.Maximum
	}
	return 0
}

func (x *Pool_DoubleRangeFilter) GetBounds() Pool_FilterBounds {
	if x != nil {
		return x.Bounds
	}
	return Pool_EXCLUDE_NONE
}

type Pool_CreationTimeRangeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Compares against the 'creation_time' field of the Ticket 'attributes'.
	Start  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start,proto3" json:"start,omitempty"`
	End    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end,proto3" json:"end,omitempty"`
	Bounds Pool_FilterBounds      `protobuf:"varint,4,opt,name=bounds,proto3,enum=open_match2.Pool_FilterBounds" json:"bounds,omitempty"` // Defines the bounds to apply when filtering tickets
}

func (x *Pool_CreationTimeRangeFilter) Reset() {
	*x = Pool_CreationTimeRangeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pool_CreationTimeRangeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool_CreationTimeRangeFilter) ProtoMessage() {}

func (x *Pool_CreationTimeRangeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pool_CreationTimeRangeFilter.ProtoReflect.Descriptor instead.
func (*Pool_CreationTimeRangeFilter) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{2, 3}
}

func (x *Pool_CreationTimeRangeFilter) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Pool_CreationTimeRangeFilter) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *Pool_CreationTimeRangeFilter) GetBounds() Pool_FilterBounds {
	if x != nil {
		return x.Bounds
	}
	return Pool_EXCLUDE_NONE
}

var File_messages_proto protoreflect.FileDescriptor

var file_messages_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x32, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x05, 0x0a, 0x06, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x32, 0x2e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a,
	0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x32, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x8d, 0x03, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x53, 0x0a, 0x0b, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x32, 0x2e, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x67, 0x73, 0x12, 0x53,
	0x0a, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x32, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xca, 0x01, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x32, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x53, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xed, 0x09, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x52, 0x0a, 0x13, 0x74, 0x61, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x32, 0x2e, 0x50, 0x6f, 0x6f,
	0x6c, 0x2e, 0x54, 0x61, 0x67, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x11, 0x74, 0x61, 0x67, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x58, 0x0a, 0x15, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x32, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x71,
	0x75, 0x61, 0x6c, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x13, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x55, 0x0a, 0x14, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x32, 0x2e, 0x50, 0x6f, 0x6f, 0x6c,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x12, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x66, 0x0a, 0x1a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x32, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x32, 0x2e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x32, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x24, 0x0a, 0x10, 0x54, 0x61,
	0x67, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x1a, 0x49, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x41, 0x72, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x9e, 0x01, 0x0a, 0x11,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x12, 0x36, 0x0a, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x32, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x52, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x1a, 0xb1, 0x01, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x32, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x1a, 0x53, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcc, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x44,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x43, 0x4c,
	0x55, 0x44, 0x45, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x58,
	0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45,
	0x58, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4f, 0x4e,
	0x4c, 0x59, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f,
	0x4d, 0x41, 0x58, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x44, 0x45,
	0x5f, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44,
	0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x45, 0x58, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03,
	0x1a, 0x02, 0x10, 0x01, 0x22, 0xbc, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x32, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x32, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x4b, 0x0a, 0x0a, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x32, 0x2e, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53,
	0x0a, 0x0f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xbc, 0x02, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a,
	0x07, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x32, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x32, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x4f, 0x0a, 0x0c,
	0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x32, 0x2e, 0x52, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a,
	0x0f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x9e, 0x02, 0x0a, 0x06, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x32, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x32, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x32, 0x2e, 0x52, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x53,
	0x0a, 0x0f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xb0, 0x01, 0x0a, 0x17, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x32, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x1a, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x47, 0x52, 0x50, 0x43, 0x10, 0x01, 0x22, 0x65, 0x0a, 0x14, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65,
	0x64, 0x4d, 0x6d, 0x66, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x32, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x22, 0x42, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x32, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x22, 0x33, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x18, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x73, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37,
	0x0a, 0x16, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x76, 0x0a, 0x0a, 0x4d, 0x6d, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x32, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x38, 0x0a, 0x04, 0x6d, 0x6d, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x32, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x6d, 0x6d, 0x66, 0x73, 0x22, 0x3f, 0x0a, 0x13, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x4d, 0x6d, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x32, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x5c, 0x0a, 0x18, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x32,
	0x2e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x0a, 0x17, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x73,
	0x22, 0x6b, 0x0a, 0x20, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x32, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x42, 0x3b, 0x5a,
	0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x66, 0x6f, 0x72, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2d,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x32, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0xaa, 0x02, 0x0a,
	0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_messages_proto_rawDescOnce sync.Once
	file_messages_proto_rawDescData = file_messages_proto_rawDesc
)

func file_messages_proto_rawDescGZIP() []byte {
	file_messages_proto_rawDescOnce.Do(func() {
		file_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_messages_proto_rawDescData)
	})
	return file_messages_proto_rawDescData
}

var file_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_messages_proto_goTypes = []any{
	(Pool_FilterBounds)(0),                   // 0: open_match2.Pool.FilterBounds
	(MatchmakingFunctionSpec_Type)(0),        // 1: open_match2.MatchmakingFunctionSpec.Type
	(*Ticket)(nil),                           // 2: open_match2.Ticket
	(*Assignment)(nil),                       // 3: open_match2.Assignment
	(*Pool)(nil),                             // 4: open_match2.Pool
	(*Profile)(nil),                          // 5: open_match2.Profile
	(*Match)(nil),                            // 6: open_match2.Match
	(*Roster)(nil),                           // 7: open_match2.Roster
	(*MatchmakingFunctionSpec)(nil),          // 8: open_match2.MatchmakingFunctionSpec
	(*ChunkedMmfRunRequest)(nil),             // 9: open_match2.ChunkedMmfRunRequest
	(*CreateTicketRequest)(nil),              // 10: open_match2.CreateTicketRequest
	(*CreateTicketResponse)(nil),             // 11: open_match2.CreateTicketResponse
	(*DeactivateTicketsRequest)(nil),         // 12: open_match2.DeactivateTicketsRequest
	(*DeactivateTicketsResponse)(nil),        // 13: open_match2.DeactivateTicketsResponse
	(*ActivateTicketsRequest)(nil),           // 14: open_match2.ActivateTicketsRequest
	(*ActivateTicketsResponse)(nil),          // 15: open_match2.ActivateTicketsResponse
	(*MmfRequest)(nil),                       // 16: open_match2.MmfRequest
	(*StreamedMmfResponse)(nil),              // 17: open_match2.StreamedMmfResponse
	(*CreateAssignmentsRequest)(nil),         // 18: open_match2.CreateAssignmentsRequest
	(*CreateAssignmentsResponse)(nil),        // 19: open_match2.CreateAssignmentsResponse
	(*WatchAssignmentsRequest)(nil),          // 20: open_match2.WatchAssignmentsRequest
	(*StreamedWatchAssignmentsResponse)(nil), // 21: open_match2.StreamedWatchAssignmentsResponse
	(*Ticket_FilterableData)(nil),            // 22: open_match2.Ticket.FilterableData
	nil,                                      // 23: open_match2.Ticket.ExtensionsEntry
	nil,                                      // 24: open_match2.Ticket.FilterableData.StringArgsEntry
	nil,                                      // 25: open_match2.Ticket.FilterableData.DoubleArgsEntry
	nil,                                      // 26: open_match2.Assignment.ExtensionsEntry
	(*Pool_TagPresentFilter)(nil),            // 27: open_match2.Pool.TagPresentFilter
	(*Pool_StringEqualsFilter)(nil),          // 28: open_match2.Pool.StringEqualsFilter
	(*Pool_DoubleRangeFilter)(nil),           // 29: open_match2.Pool.DoubleRangeFilter
	(*Pool_CreationTimeRangeFilter)(nil),     // 30: open_match2.Pool.CreationTimeRangeFilter
	nil,                                      // 31: open_match2.Pool.ExtensionsEntry
	nil,                                      // 32: open_match2.Profile.PoolsEntry
	nil,                                      // 33: open_match2.Profile.ExtensionsEntry
	nil,                                      // 34: open_match2.Match.RostersEntry
	nil,                                      // 35: open_match2.Match.ExtensionsEntry
	nil,                                      // 36: open_match2.Roster.ExtensionsEntry
	(*timestamppb.Timestamp)(nil),            // 37: google.protobuf.Timestamp
	(*anypb.Any)(nil),                        // 38: google.protobuf.Any
}
var file_messages_proto_depIdxs = []int32{
	37, // 0: open_match2.Ticket.expiration_time:type_name -> google.protobuf.Timestamp
	22, // 1: open_match2.Ticket.attributes:type_name -> open_match2.Ticket.FilterableData
	23, // 2: open_match2.Ticket.extensions:type_name -> open_match2.Ticket.ExtensionsEntry
	26, // 3: open_match2.Assignment.extensions:type_name -> open_match2.Assignment.ExtensionsEntry
	27, // 4: open_match2.Pool.tag_present_filters:type_name -> open_match2.Pool.TagPresentFilter
	28, // 5: open_match2.Pool.string_equals_filters:type_name -> open_match2.Pool.StringEqualsFilter
	29, // 6: open_match2.Pool.double_range_filters:type_name -> open_match2.Pool.DoubleRangeFilter
	30, // 7: open_match2.Pool.creation_time_range_filter:type_name -> open_match2.Pool.CreationTimeRangeFilter
	7,  // 8: open_match2.Pool.participants:type_name -> open_match2.Roster
	31, // 9: open_match2.Pool.extensions:type_name -> open_match2.Pool.ExtensionsEntry
	32, // 10: open_match2.Profile.pools:type_name -> open_match2.Profile.PoolsEntry
	33, // 11: open_match2.Profile.extensions:type_name -> open_match2.Profile.ExtensionsEntry
	34, // 12: open_match2.Match.rosters:type_name -> open_match2.Match.RostersEntry
	35, // 13: open_match2.Match.extensions:type_name -> open_match2.Match.ExtensionsEntry
	3,  // 14: open_match2.Roster.assignment:type_name -> open_match2.Assignment
	2,  // 15: open_match2.Roster.tickets:type_name -> open_match2.Ticket
	36, // 16: open_match2.Roster.extensions:type_name -> open_match2.Roster.ExtensionsEntry
	1,  // 17: open_match2.MatchmakingFunctionSpec.type:type_name -> open_match2.MatchmakingFunctionSpec.Type
	5,  // 18: open_match2.ChunkedMmfRunRequest.profile:type_name -> open_match2.Profile
	2,  // 19: open_match2.CreateTicketRequest.ticket:type_name -> open_match2.Ticket
	5,  // 20: open_match2.MmfRequest.profile:type_name -> open_match2.Profile
	8,  // 21: open_match2.MmfRequest.mmfs:type_name -> open_match2.MatchmakingFunctionSpec
	6,  // 22: open_match2.StreamedMmfResponse.match:type_name -> open_match2.Match
	7,  // 23: open_match2.CreateAssignmentsRequest.assignment_roster:type_name -> open_match2.Roster
	3,  // 24: open_match2.StreamedWatchAssignmentsResponse.assignment:type_name -> open_match2.Assignment
	24, // 25: open_match2.Ticket.FilterableData.string_args:type_name -> open_match2.Ticket.FilterableData.StringArgsEntry
	25, // 26: open_match2.Ticket.FilterableData.double_args:type_name -> open_match2.Ticket.FilterableData.DoubleArgsEntry
	37, // 27: open_match2.Ticket.FilterableData.creation_time:type_name -> google.protobuf.Timestamp
	38, // 28: open_match2.Ticket.ExtensionsEntry.value:type_name -> google.protobuf.Any
	38, // 29: open_match2.Assignment.ExtensionsEntry.value:type_name -> google.protobuf.Any
	0,  // 30: open_match2.Pool.DoubleRangeFilter.bounds:type_name -> open_match2.Pool.FilterBounds
	37, // 31: open_match2.Pool.CreationTimeRangeFilter.start:type_name -> google.protobuf.Timestamp
	37, // 32: open_match2.Pool.CreationTimeRangeFilter.end:type_name -> google.protobuf.Timestamp
	0,  // 33: open_match2.Pool.CreationTimeRangeFilter.bounds:type_name -> open_match2.Pool.FilterBounds
	38, // 34: open_match2.Pool.ExtensionsEntry.value:type_name -> google.protobuf.Any
	4,  // 35: open_match2.Profile.PoolsEntry.value:type_name -> open_match2.Pool
	38, // 36: open_match2.Profile.ExtensionsEntry.value:type_name -> google.protobuf.Any
	7,  // 37: open_match2.Match.RostersEntry.value:type_name -> open_match2.Roster
	38, // 38: open_match2.Match.ExtensionsEntry.value:type_name -> google.protobuf.Any
	38, // 39: open_match2.Roster.ExtensionsEntry.value:type_name -> google.protobuf.Any
	40, // [40:40] is the sub-list for method output_type
	40, // [40:40] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_messages_proto_init() }
func file_messages_proto_init() {
	if File_messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_messages_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Ticket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Assignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Pool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Roster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*MatchmakingFunctionSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ChunkedMmfRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CreateTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CreateTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*DeactivateTicketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*DeactivateTicketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ActivateTicketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ActivateTicketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*MmfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*StreamedMmfResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAssignmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAssignmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*WatchAssignmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*StreamedWatchAssignmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*Ticket_FilterableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*Pool_TagPresentFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*Pool_StringEqualsFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*Pool_DoubleRangeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*Pool_CreationTimeRangeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messages_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_proto_goTypes,
		DependencyIndexes: file_messages_proto_depIdxs,
		EnumInfos:         file_messages_proto_enumTypes,
		MessageInfos:      file_messages_proto_msgTypes,
	}.Build()
	File_messages_proto = out.File
	file_messages_proto_rawDesc = nil
	file_messages_proto_goTypes = nil
	file_messages_proto_depIdxs = nil
}
